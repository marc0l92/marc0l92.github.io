{"version":3,"sources":["GW2Api.js","Database.js","Summary/SummaryElement.js","Summary/Summary.js","Partials/UIUtilities.js","BusinessLogic.js","Details/RecipeDetails.js","Details/ItemDetails.js","App.js","index.js"],"names":["BASE_URL","getJson","path","a","Axios","get","response","console","log","status","data","id","db","Dexie","version","stores","items","recipes","recipesWithOutput","commerceListings","where","equals","toArray","length","GW2Api","item","put","recipe","value","recipeWithOutput","commerceListingsArray","timestamp","Date","now","VendorsPrice","vendorListings","sells","unit_price","price","quantity","Object","assign","SummaryElement","props","state","name","DB","this","then","setState","className","isActive","description","type","onClick","changeActive","title","Component","Summary","map","activeItem","key","printAmount","coppers","golds","Math","floor","silvers","goldsUi","alt","src","width","height","silverUi","copperUi","computeMaxQuantity","productListings","ingredientsListings","recipeIngredients","maxQuantity","getMaxQuantity","itemId","item_id","ingredientMaxQuantity","count","buySellListings","getTotalAmount","amount","i","n","min","ingredients","output_item_id","buys","profit","prevProfit","income","expenses","RecipeDetails","ingredientsDetails","ingredient","prevState","BL","disciplines","join","details","listings","bestInstantBuy","ItemDetails","retrieveDetails","flags","bestInstantSell","prevProps","analyzed_items","localStorage","split","App","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8fca9141.chunk.js","sourcesContent":["import Axios from \"axios\"\n\nconst BASE_URL = 'https://api.guildwars2.com/v2';\n\nasync function getJson(path) {\n    let response = await Axios.get(BASE_URL + path);\n    console.log(path, response);\n    if (response && response.status === 200) {\n        return response.data;\n    }\n    throw response;\n}\n\nexport default {\n    getItem(id) {\n        return getJson('/items/' + id);\n    },\n\n    getRecipe(id) {\n        return getJson('/recipes/' + id);\n    },\n\n    async getRecipesWithOutput(id) {\n        return getJson('/recipes/search?output=' + id);\n    },\n\n    getCommerceListings(id) {\n        return getJson('/commerce/listings/' + id);\n    }\n}","import Dexie from 'dexie';\nimport GW2Api from './GW2Api';\nimport VendorsPrice from \"./data/VendorsPrice.json\"\nconst db = new Dexie('database');\n\ndb.version(1).stores({\n    items: '&id',\n    recipes: '&id',\n    recipesWithOutput: '&id',\n    commerceListings: '&id',\n});\n\nconst LISTING_EXPIRATION_TIME = 5 * 60 * 1000;\nconst VENDOR_QUANTITY = 99999\n\n\nexport default {\n    async getItem(id) {\n        // Search in the DB\n        let items = await db.items.where(\"id\").equals(id).toArray();\n        if (items.length > 0) {\n            return items[0];\n        }\n\n        // Download from the API\n        let item = await GW2Api.getItem(id);\n        await db.items.put(item);\n\n        return item;\n    },\n\n    async getRecipe(id) {\n        // Search in the DB\n        let recipes = await db.recipes.where(\"id\").equals(id).toArray();\n        if (recipes.length > 0) {\n            return recipes[0];\n        }\n\n        // Download from the API\n        let recipe = await GW2Api.getRecipe(id);\n        await db.recipes.put(recipe);\n\n        return recipe;\n    },\n\n    async getRecipesWithOutput(id) {\n        // Search in the DB\n        let recipesWithOutput = await db.recipesWithOutput.where(\"id\").equals(id).toArray();\n        if (recipesWithOutput.length > 0) {\n            return recipesWithOutput[0].value;\n        }\n\n        // Download from the API\n        let recipeWithOutput = await GW2Api.getRecipesWithOutput(id);\n        await db.recipesWithOutput.put({ id: id, value: recipeWithOutput });\n\n        return recipeWithOutput;\n    },\n\n    async getCommerceListings(id) {\n        // Search in the DB\n        let commerceListingsArray = await db.commerceListings.where(\"id\").equals(id).toArray();\n        if (commerceListingsArray.length > 0 &&\n            (commerceListingsArray[0].timestamp === -1 || commerceListingsArray[0].timestamp + LISTING_EXPIRATION_TIME > Date.now())) {\n            return commerceListingsArray[0];\n        }\n\n        // Check vendors\n        if (id in VendorsPrice) {\n            let vendorListings = {\n                id: id,\n                sells: [{\n                    unit_price: VendorsPrice[id].price,\n                    quantity: VENDOR_QUANTITY\n                }],\n                timestamp: -1,\n            };\n            await db.commerceListings.put(vendorListings);\n            return vendorListings;\n        }\n\n        // Download from the API\n        let commerceListings = await GW2Api.getCommerceListings(id);\n        await db.commerceListings.put(Object.assign(commerceListings, { timestamp: Date.now() }));\n\n        return commerceListings;\n    },\n}\n","import React, { Component } from 'react';\nimport DB from '../Database';\n\nexport default class SummaryElement extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: props.item,\n            name: ''\n        };\n    }\n\n    componentDidMount() {\n        DB.getItem(this.state.id).then((data) => {\n            this.setState({\n                name: data.name\n            });\n        });\n    }\n\n    render() {\n        const { id, name } = this.state;\n        const className = \"list-group-item list-group-item-action\" + (this.props.isActive ? ' active' : '');\n        const description = name ? name : '#' + id\n        return (\n            <button type=\"button\" onClick={() => this.props.changeActive(id)} className={className} title={id}>{description}</button>\n        );\n    }\n\n}\n","import React, { Component } from 'react';\nimport SummaryElement from './SummaryElement';\n\nexport default class Summary extends Component {\n    render() {\n        return (\n            <ul className=\"list-group\">\n                {this.props.items.map(item => {\n                    const isActive = (item === this.props.activeItem)\n                    return (\n                        <SummaryElement key={item} item={item} changeActive={this.props.changeActive} isActive={isActive} />\n                    );\n                })}\n            </ul>\n        );\n    }\n}\n","import React from 'react';\n\nexport function printAmount(coppers) {\n    if (typeof coppers !== \"number\") {\n        return (<span>{coppers}</span>);\n    }\n    let golds = Math.floor(coppers / 10000);\n    coppers %= 10000;\n    let silvers = Math.floor(coppers / 100);\n    coppers %= 100;\n    let goldsUi = golds ? <span>{golds} <img alt=\"Gold coin\" src=\"images/Gold_coin.png\" width=\"15\" height=\"15\" /></span> : '';\n    let silverUi = silvers ? <span>{silvers} <img alt=\"Silver coin\" src=\"images/Silver_coin.png\" width=\"15\" height=\"15\" /></span> : '';\n    let copperUi = <span>{coppers} <img alt=\"Copper coin\" src=\"images/Copper_coin.png\" width=\"15\" height=\"15\" /></span>;\n    return (<span>{goldsUi} {silverUi} {copperUi}</span>);\n}\n\n// export function printFlags(flags) {\n//     return (<span></span>);\n// }","import DB from './Database';\n\nfunction computeMaxQuantity(productListings, ingredientsListings, recipeIngredients) {\n    let maxQuantity = getMaxQuantity(productListings);\n    for (let key in recipeIngredients) {\n        let itemId = recipeIngredients[key].item_id;\n        let ingredientMaxQuantity = Math.floor(getMaxQuantity(ingredientsListings[itemId]) / recipeIngredients[key].count);\n        if (ingredientMaxQuantity < maxQuantity) {\n            maxQuantity = ingredientMaxQuantity;\n        }\n    }\n    return maxQuantity;\n}\n\nfunction getMaxQuantity(buySellListings) {\n    let quantity = 0;\n    for (let key in buySellListings) {\n        quantity += buySellListings[key].quantity;\n    }\n    return quantity;\n}\n\nfunction getTotalAmount(buySellListings, quantity) {\n    let amount = 0;\n    let i = 0;\n    while (quantity > 0 && i < buySellListings.length) {\n        let n = Math.min(quantity, buySellListings[i].quantity);\n        amount += buySellListings[i].unit_price * n;\n        quantity -= n;\n        i++;\n    }\n    return amount;\n}\n\nexport default {\n    async computeProfitableProductQuantity(recipe) {\n        // Get product and ingredients listings data\n        let recipeIngredients = recipe.ingredients;\n        let productListings = (await DB.getCommerceListings(recipe.output_item_id)).buys;\n        let ingredientsListings = {};\n\n        for (let key in recipeIngredients) {\n            let itemId = recipeIngredients[key].item_id;\n            ingredientsListings[itemId] = (await DB.getCommerceListings(itemId)).sells;\n        }\n\n        // Compute max quantity\n        let maxQuantity = computeMaxQuantity(productListings, ingredientsListings, recipeIngredients);\n\n        // Compute profitable quantity\n        let quantity = 0;\n        let profit = 0.5;\n        let prevProfit = 0;\n        while (profit > prevProfit && quantity < maxQuantity) {\n            quantity++;\n            let income = getTotalAmount(productListings, quantity);\n            let expenses = 0;\n            for (let key in recipeIngredients) {\n                let itemId = recipeIngredients[key].item_id;\n                expenses += getTotalAmount(ingredientsListings[itemId], quantity * recipeIngredients[key].count);\n            }\n            prevProfit = profit;\n            profit = income - expenses;\n        }\n        return { quantity: quantity - 1, profit: quantity > 1 ? profit : 0 };\n    }\n}","import React, { Component } from 'react';\nimport DB from '../Database';\nimport BL from '../BusinessLogic';\nimport { printAmount } from '../Partials/UIUtilities';\n\nexport default class RecipeDetails extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ingredientsDetails: {},\n            ingredientsListings: {},\n            quantity: 'NA',\n            profit: 'NA'\n        };\n    }\n\n    componentDidMount() {\n        this.props.recipe.ingredients.map(ingredient => {\n            DB.getItem(ingredient.item_id).then((data) => {\n                this.setState(prevState => {\n                    const state = Object.assign({}, prevState);\n                    state.ingredientsDetails[data.id] = data;\n                    return state;\n                });\n            });\n            DB.getCommerceListings(ingredient.item_id).then((data) => {\n                this.setState(prevState => {\n                    const state = Object.assign({}, prevState);\n                    state.ingredientsListings[data.id] = data;\n                    return state;\n                });\n            });\n            return ingredient; // Useless\n        });\n        BL.computeProfitableProductQuantity(this.props.recipe).then(({ quantity, profit }) => {\n            this.setState({\n                quantity: quantity,\n                profit: profit\n            });\n        });\n    }\n\n    render() {\n        const { disciplines, ingredients } = this.props.recipe;\n        const { ingredientsDetails, ingredientsListings, quantity, profit } = this.state;\n        return (<div>\n            <div className=\"row\">\n                <div className=\"col-sm\"><label>Disciplines:</label> {disciplines.join(', ')}</div>\n                <div className=\"col-sm\"><label>Quantity:</label> {quantity}</div>\n                <div className=\"col-sm\"><label>Profit:</label> {printAmount(profit)}</div>\n            </div>\n            <table className=\"table\">\n                <thead>\n                    <tr>\n                        <th>Id</th>\n                        <th>Name</th>\n                        <th>Count</th>\n                        <th>BestInstantBuy</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {ingredients.map(ingredient => {\n                        const { item_id } = ingredient;\n                        const details = ingredientsDetails[item_id];\n                        const listings = ingredientsListings[item_id];\n                        let bestInstantBuy = <td>-</td>;\n                        if (listings) {\n                            bestInstantBuy = <td>{printAmount(listings.sells[0].unit_price)} x {listings.sells[0].quantity}</td>\n                        }\n                        return (<tr key={item_id}>\n                            <td>{item_id}</td>\n                            <td>{details ? details.name : '-'}</td>\n                            <td>{ingredient.count}</td>\n                            {bestInstantBuy}\n                        </tr>)\n                    })}\n                </tbody>\n            </table>\n        </div>)\n    }\n}\n","import React, { Component } from 'react';\nimport DB from '../Database';\nimport { printAmount } from '../Partials/UIUtilities';\nimport RecipeDetails from './RecipeDetails';\n\nexport default class ItemDetails extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: this.props.item,\n            data: null,\n            recipes: []\n        };\n    }\n\n    componentDidMount() {\n        this.retrieveDetails();\n    }\n\n    render() {\n        if (this.state.data && this.state.listings) {\n            const { id, name, flags } = this.state.data;\n            const bestInstantSell = this.state.listings.buys[0]\n            return (\n                <div>\n                    <h2>{name}</h2>\n                    <div className=\"row\">\n                        <div className=\"col-sm-3\"><label>Id:</label> {id}</div>\n                        <div className=\"col-sm-3\"><label>Flags:</label> {flags.join(', ')}</div>\n                        <div className=\"col-sm-3\"><label>Best Instant Sell:</label> {printAmount(bestInstantSell.unit_price)} x {bestInstantSell.quantity}</div>\n                    </div>\n                    <h3>Recipes</h3>\n                    {this.state.recipes.map(recipe => <RecipeDetails key={recipe.id} recipe={recipe} />)}\n                </div>\n            );\n        } else {\n            return (<div>\n                <h2>Loading #{this.props.item}...</h2>\n            </div>);\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.item !== this.props.item) {\n            this.retrieveDetails();\n        }\n    }\n\n    retrieveDetails() {\n        DB.getItem(this.props.item).then((data) => {\n            this.setState({\n                data: data\n            });\n        });\n        DB.getCommerceListings(this.props.item).then((data) => {\n            this.setState({\n                listings: data\n            });\n        });\n        this.setState({\n            recipes: []\n        }, () => {\n            DB.getRecipesWithOutput(this.props.item).then((recipes) => {\n                for (let key in recipes) {\n                    DB.getRecipe(recipes[key]).then((recipe) => {\n                        // console.log(recipe);\n                        this.setState(prevState =>\n                            Object.assign({}, prevState, {\n                                recipes: [...prevState.recipes, recipe]\n                            })\n                        );\n                    });\n                }\n            });\n        });\n    }\n}\n","import React, { Component } from 'react';\nimport Summary from './Summary/Summary';\nimport ItemDetails from './Details/ItemDetails';\n\n// Read local storage\nlet analyzed_items = [12178, 12192, 12209, 62885, 73034];\nif (localStorage[\"analyzed_items\"]) {\n  analyzed_items = localStorage[\"analyzed_items\"].split(',');\n} else {\n  localStorage[\"analyzed_items\"] = analyzed_items.join(',');\n}\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeItem: analyzed_items[0]\n    };\n  }\n\n  changeActive = (item) => {\n    this.setState({\n      activeItem: item\n    });\n  }\n\n  render() {\n    const { activeItem } = this.state;\n    return (\n      <div className=\"App\">\n        <nav className=\"navbar navbar-light bg-light\">\n          <a className=\"navbar-brand\" href=\"/\">GW2 Trading</a>\n        </nav>\n\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <div className=\"col-sm-3 overflow-auto\">\n              <Summary items={analyzed_items} activeItem={activeItem} changeActive={this.changeActive} />\n            </div>\n            <div className=\"col-sm\">\n              <ItemDetails item={activeItem} />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}